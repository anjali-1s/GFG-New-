
class Solution{
  private :
  vector<int>nextSmaller(int* arr,int n)
  {
      stack<int>st;
      st.push(-1);
      
      vector<int>ans(n);
      for(int i = n-1; i >= 0; i--)
      {   
          int curr = arr[i];
          while(st.top() != -1 && arr[st.top()] >= curr){
          st.pop();
          }
          ans[i] = st.top();
          st.push(i);
      }
        return ans;
  }
  
  vector<int>previousElement(int* arr,int n)
  {
      stack<int>st;
      st.push(-1);
      
      vector<int>ans(n);
      for(int i= 0; i < n; i++)
      {
          int curr = arr[i];
          while(st.top() != -1 && arr[st.top()] >= curr){
          st.pop();
          }
          ans[i] = st.top();
          st.push(i);
      }
         return ans;
  }
  
  
     int LargestArea(int* arr,int n)
     {
         vector<int>next(n);
         next = nextSmaller(arr,n);
         vector<int>prev(n);
         prev = previousElement(arr,n);
         
         int area = INT_MIN;
         for(int i = 0; i < n; i++)
         {
             int length = arr[i];
             if(next[i] == -1)
             next[i] = n;
             
             int breadth = next[i] - prev[i] - 1;
             int Newarea = length * breadth;
             area = max(area,Newarea);
         }
           return area;
     }
  public:
    int maxArea(int M[MAX][MAX], int n, int m) {
        int area = LargestArea(M[0],m);
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(M[i][j] != 0)
                    M[i][j] = M[i][j] + M[i-1][j];
                 
                 else 
                     M[i][j] = 0;
            }
               area = max(area,LargestArea(M[i],m));
        }
          return area;
    }
};
